mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
ggplot(final, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
#expanze$dx=NA
#expanze$dy=NA
#expanze$dx <- with(expanze, final$dx[match(x, expanze$x)])
#vysledek<-dplyr::left_join(expanze, final, by = c("x"=="x"))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
ggplot(vysledek, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1, n =70, jitter =200,arrow=arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1, n =70, jitter =100,arrow=arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1, n =70, jitter =120,arrow=arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1, n =70, jitter =130,arrow=arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 2, n =70, jitter =130,arrow=arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow=arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow=arrow(length = unit(1, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow=arrow(length = unit(0.1, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow=arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow=arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),L = 40, res = 1, arrow = NULL) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),L = 40,jitter=130, res = 1.5, arrow = arrow(length = unit(0.2, "cm"))) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),L = 40,jitter=130, res = 1.5, arrow = NULL)) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),L = 40,jitter=130, res = 1.5, arrow = NULL) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = NULL) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=60,L = 5,jitter=130, res = 1.5, arrow = NULL) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=60,L = 5,jitter=130, res = 1.5) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = NULL) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = NULL) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = 0.2) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = 1) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = arrow(angle = 30, length = unit(0.25, "inches"),ends = "last", type = "open")) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = grid::arrow(angle = 30, length = unit(0.25, "inches"),ends = "last", type = "open")) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = grid::arrow(angle = 30, length = unit(0.25, "cm"),ends = "last", type = "open")) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = grid::arrow(angle = 30, length = 0.2,ends = "last", type = "open")) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow = grid::arrow(angle = 30, length = unit(0.25, "cm"),ends = "last", type = "open")) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, ,arrow=arrow(length = unit(0.2, "cm"))) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, ,arrow=arrow(length = unit(0.2, 0.2))) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, ,arrow=arrow(length = unit(0.2))) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, ,arrow=arrow(length = unit(0.2,"cm"))) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, ,arrow=arrow(length = unit(as.numeric(0.2),"cm"))) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130)
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5)
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy),n=70,L = 5,jitter=130, res = 1.5) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow=NULL) +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
ggplot(final, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(final, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=sqrt(vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(final, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=sqrt(vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(final, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=sqrt(vel)))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
df <- makedf(whitneyyh)
seg<-30
fc <-"mean"
normalize <- FALSE
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
ggplot(final, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=sqrt(vel)))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
#expanze$dx=NA
#expanze$dy=NA
#expanze$dx <- with(expanze, final$dx[match(x, expanze$x)])
#vysledek<-dplyr::left_join(expanze, final, by = c("x"=="x"))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
ggplot(vysledek, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130)
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
df <- makedf(whitneyyh)
seg<-30
fc <-"mean"
normalize <- TRUE
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
ggplot(final, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=sqrt(vel)))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
#expanze$dx=NA
#expanze$dy=NA
#expanze$dx <- with(expanze, final$dx[match(x, expanze$x)])
#vysledek<-dplyr::left_join(expanze, final, by = c("x"=="x"))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
ggplot(vysledek, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130)
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130)
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow = arrow(length = unit(0.2, "cm")))
ggplot(final, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=sqrt(vel)))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.15, "cm")))
ggplot(vysledek, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.15, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow = arrow(length = unit(0.15, "cm")))
ggplot(vysledek, aes(x=x,y=y))+    scale_colour_continuous(low = "grey80", high = "darkred") + metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow = arrow(length = unit(0.15, "cm")))+geom_raster(aes(fill=vel))
ggplot(vysledek, aes(x=x,y=y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow = arrow(length = unit(0.15, "cm")))
ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =70, jitter =130,arrow = arrow(length = unit(0.15, "cm")))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x = x, y = y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
par(mfrow=c(1,2))
ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
}
?vplot
vplot2(df,30,T,"mean")
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
par(mfrow=c(1,2))
ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
}
vplot2(df,30,T,"mean")
library(gridExtra)
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
plot1<-ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
plot2<-ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
grid.arrange(plot1, plot2, ncol=2)
}
vplot2(df,30,T,"mean")
#' @param seg #into how many segments do you want to average out a vector field
#' @param normalize TRUE or FALSE if you wish to normalize vectors when they are displayed
#' @param fc function for averiging vectors in cell ("mean"/"median")
#' @param jitter amount of jitter
#' @param n amount of lines
#'
#' @return
#' @export
#'
#' @examples vplot2(df,30,T,"mean",130,70)
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
plot1<-ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
plot2<-ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
grid.arrange(plot1, plot2, ncol=2)
}
vplot2(df,30,T,"mean",130,70)
#' @param seg #into how many segments do you want to average out a vector field
#' @param normalize TRUE or FALSE if you wish to normalize vectors when they are displayed
#' @param fc function for averiging vectors in cell ("mean"/"median")
#' @param jitter amount of jitter
#' @param n amount of lines
#'
#' @return
#' @export
#'
#' @examples vplot2(df,30,T,"mean",130,70)
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
plot1<-ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
plot2<-ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c("darkblue","darkgreen","yellow"))
grid.arrange(plot1, plot2, ncol=2)
}
vplot2(df,30,T,"mean",130,70)
#' @param seg #into how many segments do you want to average out a vector field
#' @param normalize TRUE or FALSE if you wish to normalize vectors when they are displayed
#' @param fc function for averiging vectors in cell ("mean"/"median")
#' @param jitter amount of jitter
#' @param n amount of lines
#'
#' @return
#' @export
#'
#' @examples vplot2(df,30,T,"mean",130,70)
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
plot1<-ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
plot2<-ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c("darkblue","darkgreen","yellow"))
grid.arrange(plot1, plot2, ncol=2)
}
vplot2(df,30,T,"mean",130,70)
#' @param seg #into how many segments do you want to average out a vector field
#' @param normalize TRUE or FALSE if you wish to normalize vectors when they are displayed
#' @param fc function for averiging vectors in cell ("mean"/"median")
#' @param jitter amount of jitter
#' @param n amount of lines
#'
#' @return
#' @export
#'
#' @examples vplot2(df,30,T,"mean",130,70)
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
plot1<-ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
plot2<-ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") ++scale_size(range = c(0.2, 1.2))
grid.arrange(plot1, plot2, ncol=2)
}
vplot2(df,30,T,"mean",130,70)
#' @param seg #into how many segments do you want to average out a vector field
#' @param normalize TRUE or FALSE if you wish to normalize vectors when they are displayed
#' @param fc function for averiging vectors in cell ("mean"/"median")
#' @param jitter amount of jitter
#' @param n amount of lines
#'
#' @return
#' @export
#'
#' @examples vplot2(df,30,T,"mean",130,70)
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
plot1<-ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
plot2<-ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0.2, 1.2))
grid.arrange(plot1, plot2, ncol=2)
}
vplot2(df,30,T,"mean",130,70)
#' @param seg #into how many segments do you want to average out a vector field
#' @param normalize TRUE or FALSE if you wish to normalize vectors when they are displayed
#' @param fc function for averiging vectors in cell ("mean"/"median")
#' @param jitter amount of jitter
#' @param n amount of lines
#'
#' @return
#' @export
#'
#' @examples vplot2(df,30,T,"mean",130,70)
vplot2 <- function(df,seg,normalize=FALSE,fc="mean",jitter=130,n=70) {
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
if (fc=="mean") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = mean(dx)) }
if (fc=="median") {
mergedy <- ddply(df, .(cutX,cutY), summarize, mean=median(dy))
mVal = ddply(df, .(cutX, cutY), summarize, mean = median(dx)) }
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
expanze <- expand.grid(x=unique(final$x),y=unique(final$y))
vysledek<-merge(expanze, final, by.x=c("x", "y"),by.y=c("x", "y"),all.x=TRUE)
vysledek[is.na(vysledek)] <- 0
plot1<-ggplot(vysledek, aes(x=x,y=y))+scale_fill_gradientn(colours=c("darkblue","darkgreen","yellow"))+geom_raster(aes(fill=vel))+ metR::geom_streamline(data = vysledek, aes(dx = dx, dy = dy,color = vel),L = 5, res = 1.5, n =n, jitter =jitter,arrow = arrow(length = unit(0.15, "cm")))
plot2<-ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=n,L = 5,jitter=jitter, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0.2, 1.2))+theme_bw()
grid.arrange(plot1, plot2, ncol=2)
}
vplot2(df,30,T,"mean",130,70)
library(HodgePaths)
vplot2(df,30,T,"mean",130,70)
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 2,jitter=130, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
ggplot(vysledek, aes(x=x, y=y)) +metR::geom_streamline(aes(dx = dx, dy = dy, alpha = ..step..,color = sqrt(..dx..^2 + ..dy..^2)),n=70,L = 5,jitter=130, res = 1.5, arrow=NULL,lineend = "round") +scale_size(range = c(0, 0.6))
df <- makedf(out)
vplot2(df,30,T,"mean",130,70)
vplot2(df,100,T,"mean",130,70)
vplot2(df,50,T,"mean",130,70)
vplot2(df,40,T,"mean",130,70)
vplot2(df,30,T,"mean",130,70)
vplot2(df2,30,T,"mean",130,70)
vplot2(df3,30,T,"mean",130,70)
vplot2(df3,30,F,"mean",130,70)
vplot2(df4,30,T,"mean",130,70)
