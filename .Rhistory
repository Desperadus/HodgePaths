p<-p+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
df <- data.frame(x=out$BC[,1],y=out$BC[,2],dx=out$oneform[,1],dy=out$oneform[,2])
plotuj(df,15)
plotuj(df,15)
plotuj <- function(df,seg) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+0.05
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+0.05
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$x^2+final$y^2
p<-ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
df <- data.frame(x=out$BC[,1],y=out$BC[,2],dx=out$oneform[,1],dy=out$oneform[,2])
plotuj(df,15)
plotuj <- function(df,seg) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+0.05
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+0.05
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$x^2+final$y^2
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
df <- data.frame(x=out$BC[,1],y=out$BC[,2],dx=out$oneform[,1],dy=out$oneform[,2])
plotuj(df,15)
makedf <- function(BC,onefrom) {
df <- data.frame(x=BC[,1],y=BC[,2],dx=oneform[,1],dy=oneform[,2])
return(df)
}
makedf <- function(out) {
df <- data.frame(x=out$BC[,1],y=out$BC[,2],dx=out$oneform[,1],dy=out$oneform[,2])
return(df)
}
plotuj <- function(df,seg) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+0.05
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+0.05
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$x^2+final$y^2
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
df <- makedf(out)
df2 <- makedf(whitneyyc)
plotuj(df,15)
plotuj(df2,15)
View(df2)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+0.05
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+0.05
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$x^2+final$y^2
if (normalize==TRUE) {
final$dx <- final$dx/sqrt(vel)
final$dy <- final$dy/sqrt(vel)
}
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
df <- makedf(out)
df2 <- makedf(whitneyyc)
plotuj(df,15)
plotuj(df2,15)
plotuj(df2,15, TRUE)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+0.05
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+0.05
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$x^2+final$y^2
if (normalize==TRUE) {
final$dx <- final$dx/sqrt(final$vel)
final$dy <- final$dy/sqrt(final$vel)
}
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
plotuj(df2,15, TRUE)
plotuj(df2,15, TRUE)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+0.05
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+0.05
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- final$dx/sqrt(final$vel)
final$dy <- final$dy/sqrt(final$vel)
}
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
df <- makedf(out)
df2 <- makedf(whitneyyc)
plotuj(df,15)
plotuj(df2,15)
plotuj(df2,15, TRUE)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
plotuj(df2,15, TRUE)
set.seed(123)
x<-runif(n = 3000,min = 0,max = 1)
y<-runif(n = 3000,min = 0,max = 1)
xy<-cbind(x=x,y=y)
plot(xy)
ss<-which((x-0.5)^2+(y-0.5)^2<0.04)
X<-xy[-ss,]
#X<-xy
plot(X)
#TECNY POLE
jednicky=replicate(nrow(X), 1)
tezistebodu=(Matrix::t(X)%*%jednicky)/(nrow(X))
maticeteziste=matrix(replicate(nrow(X),tezistebodu),nrow=2)
vektorydoteziste=maticeteziste-Matrix::t(X)
tecnypole <- Matrix::t(vektorydoteziste)%*%cbind(c(0,-1),c(1,0))
gradientpole <- matrix(replicate(nrow(X),c(1,1)),ncol=2)
gradientpole <- (gradientpole)/5
tecnypole <- (tecnypole)/2
Vpole <- ((tecnypole))+gradientpole
drawfield(X,Vpole, 1)
drawfield(X,tecnypole, 1)
drawfield(X,gradientpole, 1)
#Filtrace
flt<-TDA::alphaComplexFiltration(X)
flt$cmplx<-flt$cmplx[-length(flt$cmplx)] ##odstranim 2-simplex s nejvyssi filtracni hodnotou
Bu=build_boundary_Cu(flt$cmplx)
cmplx <- Bu
BB<-complex_to_boundaryF(cmplx = cmplx)
derahm<-deRahmMap1f(BB[[1]],X,Vpole) #derahmovo zobrazeni na 1simplexy
out <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,derahm)
drawfield(out$BC,out$oneform, 1)
title("Whitney DeRahmu")
vysledekrozkladu <- HodgeDecomp(BB,derahm,"minres") #Dekompozice
whitneyyg <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[1]])
drawfield(whitneyyg$BC,whitneyyg$oneform,1)
title("Whitney gradient pole")
whitneyyc <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[2]])
drawfield(whitneyyc$BC,whitneyyc$oneform, 1)
title("Whitney curl pole")
whitneyyh <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[3]])
drawfield(whitneyyh$BC,whitneyyh$oneform,1)
title("Whitney harmonicke casti")
whitneyy <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[1]]+vysledekrozkladu[[2]]+vysledekrozkladu[[3]])
drawfield(whitneyy$BC,whitneyy$oneform,1)
title("Slozeni gradient+curl+harmonic pole")
makedf <- function(out) {
df <- data.frame(x=out$BC[,1],y=out$BC[,2],dx=out$oneform[,1],dy=out$oneform[,2])
return(df)
}
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
df <- makedf(out)
df2 <- makedf(whitneyyc)
plotuj(df,15)
plotuj(df2,15)
plotuj(df2,15, TRUE)
View(df2)
max(df2$y)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
print(max(final$y))
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
plotuj(df2,15, TRUE)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x),max(df$x),spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y),max(df$y),spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
print(max(final$y))
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
plotuj(df2,15, TRUE)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(min(df$x)-1,max(df$x)+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
print(max(final$y))
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
df <- makedf(out)
df2 <- makedf(whitneyyc)
plotuj(df,15)
plotuj(df,15, T)
plotuj(df2,15, T)
plotuj(df3,15) #Gradient
plotuj(df3,15, T)
df3 <- makedf(whitneyyg)
plotuj(df3,15) #Gradient
plotuj(df3,15, T)
plotuj(df3,30, T)
plotuj(df2,30) #Curl
plotuj(df2,30, T)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
print(max(final$y))
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
plotuj(df3,15) #Gradient
plotuj(df3,30, T)
df4 <- makedf(whitneyyh)
plotuj(df4,30)
plotuj(df4,30,T)
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
print(max(final$y))
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy, colour="red"),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
plotuj(df,15, T)
plotuj(df2,30) #Curl
plotuj <- function(df,seg,normalize=FALSE) {
library(ggplot2)
library(plyr)
minimum<-min(df$x)
maximum<-max(df$x)
spacing <- (maximum-minimum)/(seg-1)
df$cutX <- cut(df$x, breaks = seq(minimum-1,maximum+1,spacing))
df$cutY <- cut(df$y, breaks = seq(min(df$y)-1,max(df$y)+1,spacing))
mVal = plyr::ddply(df, .(cutX, cutY), summarize, mean = mean(dx))
mVal$cutX = as.character(mVal$cutX)
mVal$cutX = unlist(strsplit(mVal$cutX, ","))[c(T,F)]
mVal$cutX = as.numeric(sub("\\(", "", mVal$cutX))+spacing/2
mVal$cutY = as.character(mVal$cutY)
mVal$cutY = unlist(strsplit(mVal$cutY, ","))[c(T,F)]
mVal$cutY = as.numeric(sub("\\(", "", mVal$cutY))+spacing/2
#coordinates(mVal) = ~cutX +cutY
#gridded(mVal) = TRUE
#mergedx <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dx))
mergedy <- plyr::ddply(df, .(cutX,cutY), summarize, mean=mean(dy))
final=data.frame(x=mVal$cutX,y=mVal$cutY, dx=mVal$mean,dy=mergedy$mean)
final$vel=final$dx^2+final$dy^2
if (normalize==TRUE) {
final$dx <- (final$dx/sqrt(final$vel))*spacing
final$dy <- (final$dy/sqrt(final$vel))*spacing
}
print(max(final$y))
ggplot(final, aes(x = x, y = y))+scale_colour_continuous(low = "grey80", high = "darkred")+geom_raster(aes(fill=vel))+geom_segment(aes(xend = x + dx, yend = y + dy),size = 0.3, arrow = arrow(length = unit(0.2, "cm")))
#ggplot(final, aes(x=x,y=y)) +geom_raster(aes(fill=vel))+ metR::geom_streamline(data = final, aes(dx = dx, dy = dy),L = 1.75, res = 1, n = 60, jitter =150)
}
plotuj(df,15) #DeRahm
plotuj(df,15, T)
plotuj(df2,30) #Curl
plotuj(df2,30, T)
plotuj(df3,15) #Gradient
plotuj(df3,30, T)
library(HodgePaths)
vplot(df4,30,T)
devtools::load_all(".")
vplot(df4,30,T)
vplot(df4,30)
library(HodgePaths)
