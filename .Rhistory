deRahmMap1f()
devtools::load_all(".")
deRahmMap1f()
?deRahmMap1f
??deRahmMap1f
?deRahmMap1f
use_package("Matrix")
library(devtools)
use_package("Matrix")
use_package("Rcpp")
use_package("RcppEigen")
Rcpp.package.skeleton("HodgePaths")
?Rcpp
library("Rcpp")
Rcpp.package.skeleton("HodgePaths")
usethis::use_rcpp()
library(HodgePaths)
library(HodgePaths)
use_package("RcppEigen")
use_package("Rcpp")
library(RcppEigen)
?RcppEigen
library(HodgePaths)
library(HodgePaths)
?HodgeDecomp
library(HodgePaths)
library(HodgePaths)
set.seed(123)
x<-runif(n = 100,min = 0,max = 1)
y<-runif(n = 100,min = 0,max = 1)
xy<-cbind(x=x,y=y)
plot(xy)
ss<-which((x-0.5)^2+(y-0.5)^2<0.04)
plot(xy[-ss,])
X<-xy[-ss,]
#TECNY POLE
jednicky=replicate(nrow(X), 1)
tezistebodu=(Matrix::t(X)%*%jednicky)/(nrow(X))
maticeteziste=matrix(replicate(nrow(X),tezistebodu),nrow=2)
vektorydoteziste=maticeteziste-Matrix::t(X)
tecnypole <- Matrix::t(vektorydoteziste)%*%cbind(c(0,-1),c(1,0))
gradientpole <- matrix(replicate(nrow(X),c(1,1)),ncol=2)
gradientpole <- (gradientpole)/5
tecnypole <- (tecnypole)/2
Vpole <- ((tecnypole))+gradientpole
drawfield(X,Vpole, 1)
drawfield(X,tecnypole, 1)
drawfield(X,gradientpole, 1)
drawfield <- function(points,vfield, divide) {
vfield <- vfield / divide
plot(x=points[,1],y=points[,2],xlim=c(min(points[,1]-abs(vfield[,1])),max(points[,1]+abs(vfield[,1]))),ylim=c(min(points[,2]-abs(vfield[,2])),max(points[,2]+abs(vfield[,2]))))
arrows(points[,1],points[,2],points[,1]+vfield[,1],points[,2]+vfield[,2])
}
drawfield(X,Vpole, 1)
drawfield(X,tecnypole, 1)
drawfield(X,gradientpole, 1)
#Filtrace
flt<-TDA::alphaComplexFiltration(X)
flt$cmplx<-flt$cmplx[-length(flt$cmplx)] ##odstranim 2-simplex s nejvyssi filtracni hodnotou
Bu=build_boundary_Cu(flt$cmplx)
Bu=Rcpp::build_boundary_Cu(flt$cmplx)
BB<-complex_to_boundaryF(cmplx = cmplx)
devtools::load_all(".")
Bu=build_boundary_Cu(flt$cmplx)
library(HodgePaths)
library(HodgePaths)
Bu=build_boundary_Cu(flt$cmplx)
devtools::load_all(".")
Bu=build_boundary_Cu(flt$cmplx)
cmplx <- Bu
BB<-complex_to_boundaryF(cmplx = cmplx)
derahm<-deRahmMap1f(BB[[1]],X,Vpole) #derahmovo zobrazeni na 1simplexy
out <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,derahm)
drawfield(out$BC,out$oneform, 1)
title("Whitney DeRahmu")
vysledekrozkladu <- HodgeDecomp(BB,derahm) #Dekompozice
library(HodgePaths)
vysledekrozkladu <- HodgeDecomp(BB,derahm) #Dekompozice
library(HodgePaths)
devtools::load_all(".")
vysledekrozkladu <- HodgeDecomp(BB,derahm) #Dekompozice
library(HodgePaths)
vysledekrozkladu <- HodgeDecomp(BB,derahm) #Dekompozice
library(HodgePaths)
vysledekrozkladu <- HodgeDecomp(BB,derahm) #Dekompozice
library(HodgePaths)
vysledekrozkladu <- HodgeDecomp(BB,derahm) #Dekompozice
whitneyyg <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[1]])
drawfield(whitneyyg$BC,whitneyyg$oneform,1)
title("Whitney gradient pole")
drawfield(whitneyyg$BC,whitneyyg$oneform,10)
whitneyyc <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[2]])
drawfield(whitneyyc$BC,whitneyyc$oneform, 10)
title("Whitney curl pole")
vysledekrozkladu <- HodgeDecomp(BB,derahm,"minres") #Dekompozice
whitneyyg <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[1]])
drawfield(whitneyyg$BC,whitneyyg$oneform,10)
title("Whitney gradient pole")
vysledekrozkladu <- HodgeDecomp(BB,derahm,"pinv") #Dekompozice
whitneyyg <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[1]])
drawfield(whitneyyg$BC,whitneyyg$oneform,10)
title("Whitney gradient pole")
vysledekrozkladu <- HodgeDecomp(BB,derahm,"bicg") #Dekompozice
whitneyyg <- WhitneyMap1f_BC(cmplx,flt$cmplx,X,vysledekrozkladu[[1]])
drawfield(whitneyyg$BC,whitneyyg$oneform,10)
title("Whitney gradient pole")
vysledekrozkladu <- HodgeDecomp(BB,derahm,"minres") #Dekompozice
BB<-complex_to_boundaryF(cmplx = cmplx)
Bu=build_boundary_Cu(flt$cmplx)
devtools::load_all(".")
Bu=build_boundary_Cu(flt$cmplx)
library(HodgePaths)
devtools::load_all(".")
devtools::load_all()
devtools::load_all(",")
devtools::load_all(".")
Bu=build_boundary_Cu(flt$cmplx)
library(HodgePaths)
Bu=build_boundary_Cu(flt$cmplx)
library(HodgePaths)
devtools::load_all(".")
Bu=build_boundary_Cu(flt$cmplx)
vysledekrozkladu <- HodgeDecomp(BB,derahm,"minres") #Dekompozice
compileAttributes()
compileAttributes()
library(HodgePaths)
vysledekrozkladu <- HodgeDecomp(BB,derahm,"minres") #Dekompozice
BB<-complex_to_boundaryF(cmplx = cmplx)
library(HodgePaths)
vysledekrozkladu <- HodgeDecomp(BB,derahm,"minres") #Dekompozice
BB<-complex_to_boundaryF(cmplx = cmplx)
Bu=build_boundary_Cu(flt$cmplx)
devtools::load_all(".")
Bu=build_boundary_Cu(flt$cmplx)
Rcpp::sourceCpp("src/build_boundary_Cu.cpp")
library(HodgePaths)
Bu=build_boundary_Cu(flt$cmplx)
#Filtrace
flt<-TDA::alphaComplexFiltration(X)
flt$cmplx<-flt$cmplx[-length(flt$cmplx)] ##odstranim 2-simplex s nejvyssi filtracni hodnotou
Bu=build_boundary_Cu(flt$cmplx)
devtools::load_all(".")
Bu=build_boundary_Cu(flt$cmplx)
